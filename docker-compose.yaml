version: '3.4'

volumes:
    influxdb_data: {}
    grafana_data: {}

services:

    influxdb:
        image: influxdb:1.8.3
        environment: 
          - INFLUXDB_LOGGING_LEVEL=error
          - INFLUXDB_CONTINUOUS_QUERIES_LOG_ENABLED=false
          - INFLUXDB_DATA_QUERY_LOG_ENABLED=false
          - INFLUXDB_HTTP_LOG_ENABLED=false
        volumes:
          - influxdb_data:/var/lib/influxdb2
        ports:
          - "8086:8086"
        restart: 'always'

    grafana:
        image: grafana/grafana
        depends_on:
            - influxdb
        ports:
            - 3000:3000
        volumes:
            - grafana_data:/var/lib/grafana
            - ./grafana/provisioning/:/etc/grafana/provisioning/
            - ./grafana/grafana.ini:/etc/grafana/grafana.ini
        environment: 
            - GF_LOG_LEVEL=error
        links:
            - influxdb
        restart: always

    rabbitmq:
        image: rabbitmq:3.8
        environment:
            - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log [{console,[{level,warning}]}]
        ports:
            - 15672:15672

    data_iterator_worker:
        build: .
        image: &img worker
        command: [celery, worker, --app=data_iterator_worker.app]
        environment: &env
            - broker_protocol=amqp
            - broker_user=guest
            - broker_password=guest
            - broker_host=rabbitmq
            - broker_port=5672
            - CELERY_RESULT_BACKEND=rpc
            - CELERY_WORKER_SEND_TASK_EVENTS=True
            - influxdb_host=influxdb
            - influx_port=8086
            - influx_database=machines
            - data_path=../data
            # - C_FORCE_ROOT=true
        depends_on:
            - rabbitmq
        restart: always
        volumes: &volume
            - ./app:/home/app
            - ./data:/home/data

    parser_worker:
        build: .
        image: *img
        container_name: 'parser_worker'
        command: [celery, worker, --app=parser_worker.app, --queues=parser_queue]
        environment: *env
        links:
            - rabbitmq
            - influxdb
        depends_on:
            - rabbitmq
        volumes: *volume
        restart: always

    database_worker:
        build: .
        image: *img
        container_name: 'database-worker'
        command: [celery, worker, --app=database_worker.app, --queues=database_queue]
        environment: *env
        links:
            - rabbitmq
            - influxdb
        depends_on:
            - rabbitmq
        volumes: *volume
        restart: always
